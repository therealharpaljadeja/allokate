{"abi":[{"type":"function","name":"allocate","inputs":[{"name":"_data","type":"bytes","internalType":"bytes"},{"name":"_sender","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"distribute","inputs":[{"name":"_recipientIds","type":"address[]","internalType":"address[]"},{"name":"_data","type":"bytes","internalType":"bytes"},{"name":"_sender","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getAllo","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAllo"}],"stateMutability":"view"},{"type":"function","name":"getPayouts","inputs":[{"name":"_recipientIds","type":"address[]","internalType":"address[]"},{"name":"_data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IStrategy.PayoutSummary[]","components":[{"name":"recipientAddress","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getPoolAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRecipientStatus","inputs":[{"name":"_recipientId","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint8","internalType":"enum IStrategy.Status"}],"stateMutability":"view"},{"type":"function","name":"getStrategyId","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"increasePoolAmount","inputs":[{"name":"_amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"initialize","inputs":[{"name":"_poolId","type":"uint256","internalType":"uint256"},{"name":"_data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isPoolActive","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"isValidAllocator","inputs":[{"name":"_allocator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"registerRecipient","inputs":[{"name":"_data","type":"bytes","internalType":"bytes"},{"name":"_sender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"event","name":"Allocated","inputs":[{"name":"recipientId","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"token","type":"address","indexed":false,"internalType":"address"},{"name":"sender","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Distributed","inputs":[{"name":"recipientId","type":"address","indexed":true,"internalType":"address"},{"name":"recipientAddress","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sender","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"name":"poolId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"data","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"PoolActive","inputs":[{"name":"active","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Registered","inputs":[{"name":"recipientId","type":"address","indexed":true,"internalType":"address"},{"name":"data","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"sender","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allocate(bytes,address)":"ef2920fc","distribute(address[],bytes,address)":"0a6f0ee9","getAllo()":"15cc481e","getPayouts(address[],bytes[])":"b2b878d0","getPoolAmount()":"4ab4ba42","getPoolId()":"38fff2d0","getRecipientStatus(address)":"eb11af93","getStrategyId()":"42fda9c7","increasePoolAmount(uint256)":"f5b0dfb7","initialize(uint256,bytes)":"edd146cc","isPoolActive()":"df868ed3","isValidAllocator(address)":"4d31d087","registerRecipient(bytes,address)":"2bbe0cae"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllo\",\"outputs\":[{\"internalType\":\"contract IAllo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"getPayouts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategy.PayoutSummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipientId\",\"type\":\"address\"}],\"name\":\"getRecipientStatus\",\"outputs\":[{\"internalType\":\"enum IStrategy.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increasePoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"isValidAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\",\"events\":{\"Allocated(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount allocated\",\"recipientId\":\"The ID of the recipient\",\"token\":\"The token allocated\"}},\"Distributed(address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount distributed\",\"recipientAddress\":\"The recipient\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}},\"Initialized(uint256,bytes)\":{\"params\":{\"data\":\"The data passed to the 'initialize' function\",\"poolId\":\"The ID of the pool\"}},\"PoolActive(bool)\":{\"params\":{\"active\":\"The status of the pool\"}},\"Registered(address,bytes,address)\":{\"params\":{\"data\":\"The data passed to the 'registerRecipient' function\",\"recipientId\":\"The ID of the recipient\",\"sender\":\"The sender\"}}},\"kind\":\"dev\",\"methods\":{\"allocate(bytes,address)\":{\"details\":\"The encoded '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to allocate to the recipient\",\"_sender\":\"The address of the sender\"}},\"distribute(address[],bytes,address)\":{\"details\":\"most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay.\"},\"getAllo()\":{\"returns\":{\"_0\":\"The 'Allo' contract\"}},\"getPayouts(address[],bytes[])\":{\"details\":\"Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\",\"params\":{\"_data\":\"The encoded data\",\"_recipientIds\":\"The IDs of the recipients\"}},\"getPoolAmount()\":{\"returns\":{\"_0\":\"The balance of the pool\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"The ID of the pool\"}},\"getRecipientStatus(address)\":{\"params\":{\"_recipientId\":\"The ID of the recipient\"},\"returns\":{\"_0\":\"The status of the recipient\"}},\"getStrategyId()\":{\"returns\":{\"_0\":\"The ID of the strategy\"}},\"increasePoolAmount(uint256)\":{\"params\":{\"_amount\":\"The amount to increase the pool by\"}},\"initialize(uint256,bytes)\":{\"params\":{\"_data\":\"The encoded data\",\"_poolId\":\"The ID of the pool\"}},\"isPoolActive()\":{\"returns\":{\"_0\":\"Whether the pool is active or not\"}},\"isValidAllocator(address)\":{\"params\":{\"_allocator\":\"The allocator to check\"},\"returns\":{\"_0\":\"Whether the allocator is valid or not\"}},\"registerRecipient(bytes,address)\":{\"details\":\"Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.\",\"params\":{\"_data\":\"The data to use to register the recipient\",\"_sender\":\"The address of the sender\"},\"returns\":{\"_0\":\"The ID of the recipient\"}}},\"title\":\"IStrategy Interface\",\"version\":1},\"userdoc\":{\"events\":{\"Allocated(address,uint256,address,address)\":{\"notice\":\"Emitted when a recipient is allocated to.\"},\"Distributed(address,address,uint256,address)\":{\"notice\":\"Emitted when tokens are distributed.\"},\"Initialized(uint256,bytes)\":{\"notice\":\"Emitted when strategy is initialized.\"},\"PoolActive(bool)\":{\"notice\":\"Emitted when pool is set to active status.\"},\"Registered(address,bytes,address)\":{\"notice\":\"Emitted when a recipient is registered.\"}},\"kind\":\"user\",\"methods\":{\"allocate(bytes,address)\":{\"notice\":\"This will allocate to a recipient.\"},\"distribute(address[],bytes,address)\":{\"notice\":\"This will distribute funds (tokens) to recipients.\"},\"getAllo()\":{\"notice\":\"Getter for the address of the Allo contract.\"},\"getPayouts(address[],bytes[])\":{\"notice\":\"Checks the amount allocated to a recipient for distribution.\"},\"getPoolAmount()\":{\"notice\":\"Checks the amount of tokens in the pool.\"},\"getPoolId()\":{\"notice\":\"Getter for the 'poolId' for this strategy.\"},\"getRecipientStatus(address)\":{\"notice\":\"Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected.\"},\"getStrategyId()\":{\"notice\":\"Getter for the 'id' of the strategy.\"},\"increasePoolAmount(uint256)\":{\"notice\":\"Increases the balance of the pool.\"},\"initialize(uint256,bytes)\":{\"notice\":\"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize().\"},\"isPoolActive()\":{\"notice\":\"whether pool is active.\"},\"isValidAllocator(address)\":{\"notice\":\"Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation.\"},\"registerRecipient(bytes,address)\":{\"notice\":\"This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient.\"}},\"notice\":\"BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/interfaces/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"src/core/interfaces/IAllo.sol\":{\"keccak256\":\"0xd3ea236154c6a35dfa5699f226283b92f20be90151c89726b64c3e301994dd80\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://6b858848260585dbccbbb08c9dfc5e744cb92ed4c73a9a6e9fb7bf66c975fbea\",\"dweb:/ipfs/QmQCn1AQyyfEEHk616Mhye7zswyvtgqChYCPzKt9gKF6pj\"]},\"src/core/interfaces/IRegistry.sol\":{\"keccak256\":\"0x84702fb3f5f7f6a6a93165f60d96e4ca879050aeb3004e389d52dac0cc6c2f79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://635148af139b9bd5a18843c76d5aef3892038330e4cf8d23a327bea94f4d9715\",\"dweb:/ipfs/QmcxNUKJPYTCLKxMPduRFMdwhHE1hhghWK72HF8krEsADv\"]},\"src/core/interfaces/IStrategy.sol\":{\"keccak256\":\"0x20607334ca94739d9c3d9da71f6b8f5bff55bbf171553cfb523be7d26e324ae5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://908d01620cb3674371fc8f3043f00407e4d98ce66c2e63c4e3254889af0644cf\",\"dweb:/ipfs/QmWHxVEHc1Cwt9WDxrukSW6XW9M7Whky6iTVQK97X4E3eD\"]},\"src/core/libraries/Metadata.sol\":{\"keccak256\":\"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c\",\"dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"recipientId","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"address","name":"token","type":"address","indexed":false},{"internalType":"address","name":"sender","type":"address","indexed":false}],"type":"event","name":"Allocated","anonymous":false},{"inputs":[{"internalType":"address","name":"recipientId","type":"address","indexed":true},{"internalType":"address","name":"recipientAddress","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"address","name":"sender","type":"address","indexed":false}],"type":"event","name":"Distributed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"poolId","type":"uint256","indexed":false},{"internalType":"bytes","name":"data","type":"bytes","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"bool","name":"active","type":"bool","indexed":false}],"type":"event","name":"PoolActive","anonymous":false},{"inputs":[{"internalType":"address","name":"recipientId","type":"address","indexed":true},{"internalType":"bytes","name":"data","type":"bytes","indexed":false},{"internalType":"address","name":"sender","type":"address","indexed":false}],"type":"event","name":"Registered","anonymous":false},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"stateMutability":"payable","type":"function","name":"allocate"},{"inputs":[{"internalType":"address[]","name":"_recipientIds","type":"address[]"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"distribute"},{"inputs":[],"stateMutability":"view","type":"function","name":"getAllo","outputs":[{"internalType":"contract IAllo","name":"","type":"address"}]},{"inputs":[{"internalType":"address[]","name":"_recipientIds","type":"address[]"},{"internalType":"bytes[]","name":"_data","type":"bytes[]"}],"stateMutability":"view","type":"function","name":"getPayouts","outputs":[{"internalType":"struct IStrategy.PayoutSummary[]","name":"","type":"tuple[]","components":[{"internalType":"address","name":"recipientAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPoolAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPoolId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_recipientId","type":"address"}],"stateMutability":"view","type":"function","name":"getRecipientStatus","outputs":[{"internalType":"enum IStrategy.Status","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getStrategyId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"increasePoolAmount"},{"inputs":[{"internalType":"uint256","name":"_poolId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"isPoolActive","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_allocator","type":"address"}],"stateMutability":"view","type":"function","name":"isValidAllocator","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"stateMutability":"payable","type":"function","name":"registerRecipient","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"allocate(bytes,address)":{"details":"The encoded '_data' will be determined by the strategy implementation.","params":{"_data":"The data to use to allocate to the recipient","_sender":"The address of the sender"}},"distribute(address[],bytes,address)":{"details":"most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference this contract will need to track the amount paid already, so that it doesn't double pay."},"getAllo()":{"returns":{"_0":"The 'Allo' contract"}},"getPayouts(address[],bytes[])":{"details":"Input the values you would send to distribute(), get the amounts each recipient in the array would receive.      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.","params":{"_data":"The encoded data","_recipientIds":"The IDs of the recipients"}},"getPoolAmount()":{"returns":{"_0":"The balance of the pool"}},"getPoolId()":{"returns":{"_0":"The ID of the pool"}},"getRecipientStatus(address)":{"params":{"_recipientId":"The ID of the recipient"},"returns":{"_0":"The status of the recipient"}},"getStrategyId()":{"returns":{"_0":"The ID of the strategy"}},"increasePoolAmount(uint256)":{"params":{"_amount":"The amount to increase the pool by"}},"initialize(uint256,bytes)":{"params":{"_data":"The encoded data","_poolId":"The ID of the pool"}},"isPoolActive()":{"returns":{"_0":"Whether the pool is active or not"}},"isValidAllocator(address)":{"params":{"_allocator":"The allocator to check"},"returns":{"_0":"Whether the allocator is valid or not"}},"registerRecipient(bytes,address)":{"details":"Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional      functions should be added to allow the owner to check this. The owner could also check attestations directly      and then accept for instance. The '_data' will be determined by the strategy implementation.","params":{"_data":"The data to use to register the recipient","_sender":"The address of the sender"},"returns":{"_0":"The ID of the recipient"}}},"version":1},"userdoc":{"kind":"user","methods":{"allocate(bytes,address)":{"notice":"This will allocate to a recipient."},"distribute(address[],bytes,address)":{"notice":"This will distribute funds (tokens) to recipients."},"getAllo()":{"notice":"Getter for the address of the Allo contract."},"getPayouts(address[],bytes[])":{"notice":"Checks the amount allocated to a recipient for distribution."},"getPoolAmount()":{"notice":"Checks the amount of tokens in the pool."},"getPoolId()":{"notice":"Getter for the 'poolId' for this strategy."},"getRecipientStatus(address)":{"notice":"Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those      since there is no need for Pending or Rejected."},"getStrategyId()":{"notice":"Getter for the 'id' of the strategy."},"increasePoolAmount(uint256)":{"notice":"Increases the balance of the pool."},"initialize(uint256,bytes)":{"notice":"@dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,      use it, and then call super.initialize()."},"isPoolActive()":{"notice":"whether pool is active."},"isValidAllocator(address)":{"notice":"Checks whether a allocator is valid or not, will usually be true for all strategies      and will depend on the strategy implementation."},"registerRecipient(bytes,address)":{"notice":"This will register a recipient, set their status (and any other strategy specific values), and         return the ID of the recipient."}},"version":1}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","solady/=lib/solady/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/core/interfaces/IStrategy.sol":"IStrategy"},"libraries":{}},"sources":{"src/core/interfaces/IAllo.sol":{"keccak256":"0xd3ea236154c6a35dfa5699f226283b92f20be90151c89726b64c3e301994dd80","urls":["bzz-raw://6b858848260585dbccbbb08c9dfc5e744cb92ed4c73a9a6e9fb7bf66c975fbea","dweb:/ipfs/QmQCn1AQyyfEEHk616Mhye7zswyvtgqChYCPzKt9gKF6pj"],"license":"AGPL-3.0-only"},"src/core/interfaces/IRegistry.sol":{"keccak256":"0x84702fb3f5f7f6a6a93165f60d96e4ca879050aeb3004e389d52dac0cc6c2f79","urls":["bzz-raw://635148af139b9bd5a18843c76d5aef3892038330e4cf8d23a327bea94f4d9715","dweb:/ipfs/QmcxNUKJPYTCLKxMPduRFMdwhHE1hhghWK72HF8krEsADv"],"license":"MIT"},"src/core/interfaces/IStrategy.sol":{"keccak256":"0x20607334ca94739d9c3d9da71f6b8f5bff55bbf171553cfb523be7d26e324ae5","urls":["bzz-raw://908d01620cb3674371fc8f3043f00407e4d98ce66c2e63c4e3254889af0644cf","dweb:/ipfs/QmWHxVEHc1Cwt9WDxrukSW6XW9M7Whky6iTVQK97X4E3eD"],"license":"AGPL-3.0-only"},"src/core/libraries/Metadata.sol":{"keccak256":"0x452a95a8762fafd51d36295138f7e14189cbaaca7274d6fd34a59ad57a442d44","urls":["bzz-raw://2cc5507da2550ab9bfa0fbb263e703f9e70b831190bb7b2bcdbb231cab49795c","dweb:/ipfs/QmQXCD8v2HppXAX17aH49JvNyyfDYzGMrg63QNabUEXPpn"],"license":"AGPL-3.0-only"}},"version":1},"ast":{"absolutePath":"src/core/interfaces/IStrategy.sol","id":42921,"exportedSymbols":{"IAllo":[42561],"IStrategy":[42920]},"nodeType":"SourceUnit","src":"42:10740:23","nodes":[{"id":42755,"nodeType":"PragmaDirective","src":"42:24:23","nodes":[],"literals":["solidity","^","0.8",".19"]},{"id":42757,"nodeType":"ImportDirective","src":"82:34:23","nodes":[],"absolutePath":"src/core/interfaces/IAllo.sol","file":"./IAllo.sol","nameLocation":"-1:-1:-1","scope":42921,"sourceUnit":42562,"symbolAliases":[{"foreign":{"id":42756,"name":"IAllo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42561,"src":"90:5:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":42920,"nodeType":"ContractDefinition","src":"4478:6303:23","nodes":[{"id":42766,"nodeType":"EnumDefinition","src":"4665:139:23","nodes":[],"canonicalName":"IStrategy.Status","members":[{"id":42759,"name":"None","nameLocation":"4687:4:23","nodeType":"EnumValue","src":"4687:4:23"},{"id":42760,"name":"Pending","nameLocation":"4701:7:23","nodeType":"EnumValue","src":"4701:7:23"},{"id":42761,"name":"Accepted","nameLocation":"4718:8:23","nodeType":"EnumValue","src":"4718:8:23"},{"id":42762,"name":"Rejected","nameLocation":"4736:8:23","nodeType":"EnumValue","src":"4736:8:23"},{"id":42763,"name":"Appealed","nameLocation":"4754:8:23","nodeType":"EnumValue","src":"4754:8:23"},{"id":42764,"name":"InReview","nameLocation":"4772:8:23","nodeType":"EnumValue","src":"4772:8:23"},{"id":42765,"name":"Canceled","nameLocation":"4790:8:23","nodeType":"EnumValue","src":"4790:8:23"}],"name":"Status","nameLocation":"4670:6:23"},{"id":42771,"nodeType":"StructDefinition","src":"4872:86:23","nodes":[],"canonicalName":"IStrategy.PayoutSummary","members":[{"constant":false,"id":42768,"mutability":"mutable","name":"recipientAddress","nameLocation":"4911:16:23","nodeType":"VariableDeclaration","scope":42771,"src":"4903:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42767,"name":"address","nodeType":"ElementaryTypeName","src":"4903:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42770,"mutability":"mutable","name":"amount","nameLocation":"4945:6:23","nodeType":"VariableDeclaration","scope":42771,"src":"4937:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42769,"name":"uint256","nodeType":"ElementaryTypeName","src":"4937:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PayoutSummary","nameLocation":"4879:13:23","scope":42920,"visibility":"public"},{"id":42778,"nodeType":"EventDefinition","src":"5218:46:23","nodes":[],"anonymous":false,"documentation":{"id":42772,"nodeType":"StructuredDocumentation","src":"5058:155:23","text":"@notice Emitted when strategy is initialized.\n @param poolId The ID of the pool\n @param data The data passed to the 'initialize' function"},"eventSelector":"91efa3d50feccde0d0d202f8ae5c41ca0b2be614cebcb2bd2f4b019396e6568a","name":"Initialized","nameLocation":"5224:11:23","parameters":{"id":42777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42774,"indexed":false,"mutability":"mutable","name":"poolId","nameLocation":"5244:6:23","nodeType":"VariableDeclaration","scope":42778,"src":"5236:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42773,"name":"uint256","nodeType":"ElementaryTypeName","src":"5236:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42776,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"5258:4:23","nodeType":"VariableDeclaration","scope":42778,"src":"5252:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42775,"name":"bytes","nodeType":"ElementaryTypeName","src":"5252:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5235:28:23"}},{"id":42787,"nodeType":"EventDefinition","src":"5482:74:23","nodes":[],"anonymous":false,"documentation":{"id":42779,"nodeType":"StructuredDocumentation","src":"5270:207:23","text":"@notice Emitted when a recipient is registered.\n @param recipientId The ID of the recipient\n @param data The data passed to the 'registerRecipient' function\n @param sender The sender"},"eventSelector":"a197306e3dd5494a61a695381aa809a53b8e377a685e84e404a85d5a8da6cc62","name":"Registered","nameLocation":"5488:10:23","parameters":{"id":42786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42781,"indexed":true,"mutability":"mutable","name":"recipientId","nameLocation":"5515:11:23","nodeType":"VariableDeclaration","scope":42787,"src":"5499:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42780,"name":"address","nodeType":"ElementaryTypeName","src":"5499:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42783,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"5534:4:23","nodeType":"VariableDeclaration","scope":42787,"src":"5528:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42782,"name":"bytes","nodeType":"ElementaryTypeName","src":"5528:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":42785,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"5548:6:23","nodeType":"VariableDeclaration","scope":42787,"src":"5540:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42784,"name":"address","nodeType":"ElementaryTypeName","src":"5540:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5498:57:23"}},{"id":42798,"nodeType":"EventDefinition","src":"5755:130:23","nodes":[],"anonymous":false,"documentation":{"id":42788,"nodeType":"StructuredDocumentation","src":"5562:188:23","text":"@notice Emitted when a recipient is allocated to.\n @param recipientId The ID of the recipient\n @param amount The amount allocated\n @param token The token allocated"},"eventSelector":"463ffc2cf8b1596445c417388ed30e53eb67cf6668cb2be7f0addf8a78c8441b","name":"Allocated","nameLocation":"5761:9:23","parameters":{"id":42797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42790,"indexed":true,"mutability":"mutable","name":"recipientId","nameLocation":"5796:11:23","nodeType":"VariableDeclaration","scope":42798,"src":"5780:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42789,"name":"address","nodeType":"ElementaryTypeName","src":"5780:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42792,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5825:6:23","nodeType":"VariableDeclaration","scope":42798,"src":"5817:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42791,"name":"uint256","nodeType":"ElementaryTypeName","src":"5817:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42794,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"5849:5:23","nodeType":"VariableDeclaration","scope":42798,"src":"5841:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42793,"name":"address","nodeType":"ElementaryTypeName","src":"5841:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42796,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"5872:6:23","nodeType":"VariableDeclaration","scope":42798,"src":"5864:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42795,"name":"address","nodeType":"ElementaryTypeName","src":"5864:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5770:114:23"}},{"id":42809,"nodeType":"EventDefinition","src":"6119:143:23","nodes":[],"anonymous":false,"documentation":{"id":42799,"nodeType":"StructuredDocumentation","src":"5891:223:23","text":"@notice Emitted when tokens are distributed.\n @param recipientId The ID of the recipient\n @param recipientAddress The recipient\n @param amount The amount distributed\n @param sender The sender"},"eventSelector":"b5b51454adfa840bd593658325a60a50b0216f12eb5d2937efe6cea935675b7d","name":"Distributed","nameLocation":"6125:11:23","parameters":{"id":42808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42801,"indexed":true,"mutability":"mutable","name":"recipientId","nameLocation":"6162:11:23","nodeType":"VariableDeclaration","scope":42809,"src":"6146:27:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42800,"name":"address","nodeType":"ElementaryTypeName","src":"6146:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42803,"indexed":false,"mutability":"mutable","name":"recipientAddress","nameLocation":"6191:16:23","nodeType":"VariableDeclaration","scope":42809,"src":"6183:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42802,"name":"address","nodeType":"ElementaryTypeName","src":"6183:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42805,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"6225:6:23","nodeType":"VariableDeclaration","scope":42809,"src":"6217:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42804,"name":"uint256","nodeType":"ElementaryTypeName","src":"6217:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42807,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"6249:6:23","nodeType":"VariableDeclaration","scope":42809,"src":"6241:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42806,"name":"address","nodeType":"ElementaryTypeName","src":"6241:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6136:125:23"}},{"id":42814,"nodeType":"EventDefinition","src":"6372:30:23","nodes":[],"anonymous":false,"documentation":{"id":42810,"nodeType":"StructuredDocumentation","src":"6268:99:23","text":"@notice Emitted when pool is set to active status.\n @param active The status of the pool"},"eventSelector":"d94c9bc4d43c51d8dc345a016d8e3d994432fac68e72832e4cf3a616bd8efae0","name":"PoolActive","nameLocation":"6378:10:23","parameters":{"id":42813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42812,"indexed":false,"mutability":"mutable","name":"active","nameLocation":"6394:6:23","nodeType":"VariableDeclaration","scope":42814,"src":"6389:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42811,"name":"bool","nodeType":"ElementaryTypeName","src":"6389:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6388:13:23"}},{"id":42821,"nodeType":"FunctionDefinition","src":"6599:49:23","nodes":[],"documentation":{"id":42815,"nodeType":"StructuredDocumentation","src":"6502:92:23","text":"@notice Getter for the address of the Allo contract.\n @return The 'Allo' contract"},"functionSelector":"15cc481e","implemented":false,"kind":"function","modifiers":[],"name":"getAllo","nameLocation":"6608:7:23","parameters":{"id":42816,"nodeType":"ParameterList","parameters":[],"src":"6615:2:23"},"returnParameters":{"id":42820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42821,"src":"6641:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAllo_$42561","typeString":"contract IAllo"},"typeName":{"id":42818,"nodeType":"UserDefinedTypeName","pathNode":{"id":42817,"name":"IAllo","nameLocations":["6641:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":42561,"src":"6641:5:23"},"referencedDeclaration":42561,"src":"6641:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IAllo_$42561","typeString":"contract IAllo"}},"visibility":"internal"}],"src":"6640:7:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42827,"nodeType":"FunctionDefinition","src":"6748:53:23","nodes":[],"documentation":{"id":42822,"nodeType":"StructuredDocumentation","src":"6654:89:23","text":"@notice Getter for the 'poolId' for this strategy.\n @return The ID of the pool"},"functionSelector":"38fff2d0","implemented":false,"kind":"function","modifiers":[],"name":"getPoolId","nameLocation":"6757:9:23","parameters":{"id":42823,"nodeType":"ParameterList","parameters":[],"src":"6766:2:23"},"returnParameters":{"id":42826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42827,"src":"6792:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42824,"name":"uint256","nodeType":"ElementaryTypeName","src":"6792:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6791:9:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42833,"nodeType":"FunctionDefinition","src":"6899:57:23","nodes":[],"documentation":{"id":42828,"nodeType":"StructuredDocumentation","src":"6807:87:23","text":"@notice Getter for the 'id' of the strategy.\n @return The ID of the strategy"},"functionSelector":"42fda9c7","implemented":false,"kind":"function","modifiers":[],"name":"getStrategyId","nameLocation":"6908:13:23","parameters":{"id":42829,"nodeType":"ParameterList","parameters":[],"src":"6921:2:23"},"returnParameters":{"id":42832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42833,"src":"6947:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6947:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6946:9:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42841,"nodeType":"FunctionDefinition","src":"7226:75:23","nodes":[],"documentation":{"id":42834,"nodeType":"StructuredDocumentation","src":"6962:259:23","text":"@notice Checks whether a allocator is valid or not, will usually be true for all strategies\n      and will depend on the strategy implementation.\n @param _allocator The allocator to check\n @return Whether the allocator is valid or not"},"functionSelector":"4d31d087","implemented":false,"kind":"function","modifiers":[],"name":"isValidAllocator","nameLocation":"7235:16:23","parameters":{"id":42837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42836,"mutability":"mutable","name":"_allocator","nameLocation":"7260:10:23","nodeType":"VariableDeclaration","scope":42841,"src":"7252:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42835,"name":"address","nodeType":"ElementaryTypeName","src":"7252:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7251:20:23"},"returnParameters":{"id":42840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42841,"src":"7295:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42838,"name":"bool","nodeType":"ElementaryTypeName","src":"7295:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7294:6:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42847,"nodeType":"FunctionDefinition","src":"7397:48:23","nodes":[],"documentation":{"id":42842,"nodeType":"StructuredDocumentation","src":"7307:85:23","text":"@notice whether pool is active.\n @return Whether the pool is active or not"},"functionSelector":"df868ed3","implemented":false,"kind":"function","modifiers":[],"name":"isPoolActive","nameLocation":"7406:12:23","parameters":{"id":42843,"nodeType":"ParameterList","parameters":[],"src":"7418:2:23"},"returnParameters":{"id":42846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42847,"src":"7439:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42844,"name":"bool","nodeType":"ElementaryTypeName","src":"7439:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7438:6:23"},"scope":42920,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":42853,"nodeType":"FunctionDefinition","src":"7548:57:23","nodes":[],"documentation":{"id":42848,"nodeType":"StructuredDocumentation","src":"7451:92:23","text":"@notice Checks the amount of tokens in the pool.\n @return The balance of the pool"},"functionSelector":"4ab4ba42","implemented":false,"kind":"function","modifiers":[],"name":"getPoolAmount","nameLocation":"7557:13:23","parameters":{"id":42849,"nodeType":"ParameterList","parameters":[],"src":"7570:2:23"},"returnParameters":{"id":42852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42853,"src":"7596:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42850,"name":"uint256","nodeType":"ElementaryTypeName","src":"7596:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7595:9:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42859,"nodeType":"FunctionDefinition","src":"7720:54:23","nodes":[],"documentation":{"id":42854,"nodeType":"StructuredDocumentation","src":"7611:104:23","text":"@notice Increases the balance of the pool.\n @param _amount The amount to increase the pool by"},"functionSelector":"f5b0dfb7","implemented":false,"kind":"function","modifiers":[],"name":"increasePoolAmount","nameLocation":"7729:18:23","parameters":{"id":42857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42856,"mutability":"mutable","name":"_amount","nameLocation":"7756:7:23","nodeType":"VariableDeclaration","scope":42859,"src":"7748:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42855,"name":"uint256","nodeType":"ElementaryTypeName","src":"7748:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7747:17:23"},"returnParameters":{"id":42858,"nodeType":"ParameterList","parameters":[],"src":"7773:0:23"},"scope":42920,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":42868,"nodeType":"FunctionDefinition","src":"8167:95:23","nodes":[],"documentation":{"id":42860,"nodeType":"StructuredDocumentation","src":"7780:382:23","text":"@notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\n      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\n      since there is no need for Pending or Rejected.\n @param _recipientId The ID of the recipient\n @return The status of the recipient"},"functionSelector":"eb11af93","implemented":false,"kind":"function","modifiers":[],"name":"getRecipientStatus","nameLocation":"8176:18:23","parameters":{"id":42863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42862,"mutability":"mutable","name":"_recipientId","nameLocation":"8212:12:23","nodeType":"VariableDeclaration","scope":42868,"src":"8204:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42861,"name":"address","nodeType":"ElementaryTypeName","src":"8204:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8194:36:23"},"returnParameters":{"id":42867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42868,"src":"8254:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$42766","typeString":"enum IStrategy.Status"},"typeName":{"id":42865,"nodeType":"UserDefinedTypeName","pathNode":{"id":42864,"name":"Status","nameLocations":["8254:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":42766,"src":"8254:6:23"},"referencedDeclaration":42766,"src":"8254:6:23","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$42766","typeString":"enum IStrategy.Status"}},"visibility":"internal"}],"src":"8253:8:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42882,"nodeType":"FunctionDefinition","src":"8670:143:23","nodes":[],"documentation":{"id":42869,"nodeType":"StructuredDocumentation","src":"8268:397:23","text":"@notice Checks the amount allocated to a recipient for distribution.\n @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\n      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\n @param _recipientIds The IDs of the recipients\n @param _data The encoded data"},"functionSelector":"b2b878d0","implemented":false,"kind":"function","modifiers":[],"name":"getPayouts","nameLocation":"8679:10:23","parameters":{"id":42876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42872,"mutability":"mutable","name":"_recipientIds","nameLocation":"8716:13:23","nodeType":"VariableDeclaration","scope":42882,"src":"8699:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42870,"name":"address","nodeType":"ElementaryTypeName","src":"8699:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42871,"nodeType":"ArrayTypeName","src":"8699:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":42875,"mutability":"mutable","name":"_data","nameLocation":"8754:5:23","nodeType":"VariableDeclaration","scope":42882,"src":"8739:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":42873,"name":"bytes","nodeType":"ElementaryTypeName","src":"8739:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":42874,"nodeType":"ArrayTypeName","src":"8739:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"8689:76:23"},"returnParameters":{"id":42881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42882,"src":"8789:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PayoutSummary_$42771_memory_ptr_$dyn_memory_ptr","typeString":"struct IStrategy.PayoutSummary[]"},"typeName":{"baseType":{"id":42878,"nodeType":"UserDefinedTypeName","pathNode":{"id":42877,"name":"PayoutSummary","nameLocations":["8789:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":42771,"src":"8789:13:23"},"referencedDeclaration":42771,"src":"8789:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PayoutSummary_$42771_storage_ptr","typeString":"struct IStrategy.PayoutSummary"}},"id":42879,"nodeType":"ArrayTypeName","src":"8789:15:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PayoutSummary_$42771_storage_$dyn_storage_ptr","typeString":"struct IStrategy.PayoutSummary[]"}},"visibility":"internal"}],"src":"8788:24:23"},"scope":42920,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":42890,"nodeType":"FunctionDefinition","src":"9188:66:23","nodes":[],"documentation":{"id":42883,"nodeType":"StructuredDocumentation","src":"8913:270:23","text":"@notice\n @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\n      use it, and then call super.initialize().\n @param _poolId The ID of the pool\n @param _data The encoded data"},"functionSelector":"edd146cc","implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"9197:10:23","parameters":{"id":42888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42885,"mutability":"mutable","name":"_poolId","nameLocation":"9216:7:23","nodeType":"VariableDeclaration","scope":42890,"src":"9208:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42884,"name":"uint256","nodeType":"ElementaryTypeName","src":"9208:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42887,"mutability":"mutable","name":"_data","nameLocation":"9238:5:23","nodeType":"VariableDeclaration","scope":42890,"src":"9225:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42886,"name":"bytes","nodeType":"ElementaryTypeName","src":"9225:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9207:37:23"},"returnParameters":{"id":42889,"nodeType":"ParameterList","parameters":[],"src":"9253:0:23"},"scope":42920,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":42900,"nodeType":"FunctionDefinition","src":"9920:121:23","nodes":[],"documentation":{"id":42891,"nodeType":"StructuredDocumentation","src":"9260:655:23","text":"@notice This will register a recipient, set their status (and any other strategy specific values), and\n         return the ID of the recipient.\n @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\n      functions should be added to allow the owner to check this. The owner could also check attestations directly\n      and then accept for instance. The '_data' will be determined by the strategy implementation.\n @param _data The data to use to register the recipient\n @param _sender The address of the sender\n @return The ID of the recipient"},"functionSelector":"2bbe0cae","implemented":false,"kind":"function","modifiers":[],"name":"registerRecipient","nameLocation":"9929:17:23","parameters":{"id":42896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42893,"mutability":"mutable","name":"_data","nameLocation":"9969:5:23","nodeType":"VariableDeclaration","scope":42900,"src":"9956:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42892,"name":"bytes","nodeType":"ElementaryTypeName","src":"9956:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":42895,"mutability":"mutable","name":"_sender","nameLocation":"9992:7:23","nodeType":"VariableDeclaration","scope":42900,"src":"9984:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42894,"name":"address","nodeType":"ElementaryTypeName","src":"9984:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9946:59:23"},"returnParameters":{"id":42899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42900,"src":"10032:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42897,"name":"address","nodeType":"ElementaryTypeName","src":"10032:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10031:9:23"},"scope":42920,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":42908,"nodeType":"FunctionDefinition","src":"10297:72:23","nodes":[],"documentation":{"id":42901,"nodeType":"StructuredDocumentation","src":"10047:245:23","text":"@notice This will allocate to a recipient.\n @dev The encoded '_data' will be determined by the strategy implementation.\n @param _data The data to use to allocate to the recipient\n @param _sender The address of the sender"},"functionSelector":"ef2920fc","implemented":false,"kind":"function","modifiers":[],"name":"allocate","nameLocation":"10306:8:23","parameters":{"id":42906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42903,"mutability":"mutable","name":"_data","nameLocation":"10328:5:23","nodeType":"VariableDeclaration","scope":42908,"src":"10315:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42902,"name":"bytes","nodeType":"ElementaryTypeName","src":"10315:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":42905,"mutability":"mutable","name":"_sender","nameLocation":"10343:7:23","nodeType":"VariableDeclaration","scope":42908,"src":"10335:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42904,"name":"address","nodeType":"ElementaryTypeName","src":"10335:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10314:37:23"},"returnParameters":{"id":42907,"nodeType":"ParameterList","parameters":[],"src":"10368:0:23"},"scope":42920,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":42919,"nodeType":"FunctionDefinition","src":"10651:128:23","nodes":[],"documentation":{"id":42909,"nodeType":"StructuredDocumentation","src":"10375:271:23","text":"@notice This will distribute funds (tokens) to recipients.\n @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\n this contract will need to track the amount paid already, so that it doesn't double pay."},"functionSelector":"0a6f0ee9","implemented":false,"kind":"function","modifiers":[],"name":"distribute","nameLocation":"10660:10:23","parameters":{"id":42917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42912,"mutability":"mutable","name":"_recipientIds","nameLocation":"10697:13:23","nodeType":"VariableDeclaration","scope":42919,"src":"10680:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":42910,"name":"address","nodeType":"ElementaryTypeName","src":"10680:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":42911,"nodeType":"ArrayTypeName","src":"10680:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":42914,"mutability":"mutable","name":"_data","nameLocation":"10733:5:23","nodeType":"VariableDeclaration","scope":42919,"src":"10720:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42913,"name":"bytes","nodeType":"ElementaryTypeName","src":"10720:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":42916,"mutability":"mutable","name":"_sender","nameLocation":"10756:7:23","nodeType":"VariableDeclaration","scope":42919,"src":"10748:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42915,"name":"address","nodeType":"ElementaryTypeName","src":"10748:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10670:99:23"},"returnParameters":{"id":42918,"nodeType":"ParameterList","parameters":[],"src":"10778:0:23"},"scope":42920,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IStrategy","contractDependencies":[],"contractKind":"interface","documentation":{"id":42758,"nodeType":"StructuredDocumentation","src":"4109:368:23","text":"@title IStrategy Interface\n @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\n @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface."},"fullyImplemented":false,"linearizedBaseContracts":[42920],"name":"IStrategy","nameLocation":"4488:9:23","scope":42921,"usedErrors":[]}],"license":"AGPL-3.0-only"},"id":23}