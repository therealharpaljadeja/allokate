// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Allo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Allo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Allo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Allo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Allo | null {
    return changetype<Allo | null>(store.get_in_block("Allo", id));
  }

  static load(id: string): Allo | null {
    return changetype<Allo | null>(store.get("Allo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get feePercentage(): BigInt {
    let value = this.get("feePercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feePercentage(value: BigInt) {
    this.set("feePercentage", Value.fromBigInt(value));
  }

  get baseFee(): BigInt {
    let value = this.get("baseFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseFee(value: BigInt) {
    this.set("baseFee", Value.fromBigInt(value));
  }

  get treasury(): Bytes {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set treasury(value: Bytes) {
    this.set("treasury", Value.fromBytes(value));
  }

  get cloneableStrategies(): Array<Bytes> | null {
    let value = this.get("cloneableStrategies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set cloneableStrategies(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("cloneableStrategies");
    } else {
      this.set(
        "cloneableStrategies",
        Value.fromBytesArray(<Array<Bytes>>value),
      );
    }
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block("Pool", id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set("poolId", Value.fromBigInt(value));
  }

  get profileId(): Bytes {
    let value = this.get("profileId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set profileId(value: Bytes) {
    this.set("profileId", Value.fromBytes(value));
  }

  get strategyName(): string | null {
    let value = this.get("strategyName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set strategyName(value: string | null) {
    if (!value) {
      this.unset("strategyName");
    } else {
      this.set("strategyName", Value.fromString(<string>value));
    }
  }

  get strategyId(): string | null {
    let value = this.get("strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set strategyId(value: string | null) {
    if (!value) {
      this.unset("strategyId");
    } else {
      this.set("strategyId", Value.fromString(<string>value));
    }
  }

  get strategy(): Bytes | null {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes | null) {
    if (!value) {
      this.unset("strategy");
    } else {
      this.set("strategy", Value.fromBytes(<Bytes>value));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get feePaid(): BigInt | null {
    let value = this.get("feePaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePaid(value: BigInt | null) {
    if (!value) {
      this.unset("feePaid");
    } else {
      this.set("feePaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get baseFeePaid(): BigInt | null {
    let value = this.get("baseFeePaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set baseFeePaid(value: BigInt | null) {
    if (!value) {
      this.unset("baseFeePaid");
    } else {
      this.set("baseFeePaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get metadataProtocol(): BigInt | null {
    let value = this.get("metadataProtocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set metadataProtocol(value: BigInt | null) {
    if (!value) {
      this.unset("metadataProtocol");
    } else {
      this.set("metadataProtocol", Value.fromBigInt(<BigInt>value));
    }
  }

  get metadataPointer(): string | null {
    let value = this.get("metadataPointer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataPointer(value: string | null) {
    if (!value) {
      this.unset("metadataPointer");
    } else {
      this.set("metadataPointer", Value.fromString(<string>value));
    }
  }

  get managerRoleId(): string | null {
    let value = this.get("managerRoleId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set managerRoleId(value: string | null) {
    if (!value) {
      this.unset("managerRoleId");
    } else {
      this.set("managerRoleId", Value.fromString(<string>value));
    }
  }

  get adminRoleId(): string | null {
    let value = this.get("adminRoleId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set adminRoleId(value: string | null) {
    if (!value) {
      this.unset("adminRoleId");
    } else {
      this.set("adminRoleId", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }
}
